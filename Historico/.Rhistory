drop1(update(mod1, ~ . +id), test = "F") #adicionando uma variavel ao modelo
ClassLog(mod, df$fii)
tabela = ClassLog(mod, df$fii)
tabela$classtab
tabela$rawtab
library(caret) # matrix confusão
confusionMatrix(tabela$rawtab)
table)(tabela$rawtab
table(tabela$rawtab)
confusionMatrix(tabela$rawtab)
confusionMatrix(table(tabela$rawtab))
tabela$rawtab
tab =tabela$rawtab
View(tab)
valueTags(tabela)
value(tabela)
values(tabela)
tabela$rawtab
tabela$rawtab
ma = tabela$rawtab
confusionMatrix(ma)
tab = matrix(data=ma, 2, 2)
View(tab)
confusionMatrix(tab)
tabela = ClassLog(mod, df$fii)
ma = tabela$rawtab
tabela
ma
ClassLog(mod, df$fii)$rawtab
confusionMatrix(matrix(data=ClassLog(mod, df$fii)$rawtab, 2, 2))
confusionMatrix(matrix(data=ClassLog(mod1, df$fii)$rawtab, 2, 2))
library(pacman)
pacman::p_load(dplyr, psych, car, MASS, DescTools, QuantPsyc, ggplot2)
library(forestmodel)
library(rms)
library(MASS) #para regressao stepwise
library(modEvA) #pseudo R2
library(DescTools) #pseudo R2
library(caret) # matrix confusao
#PRÃ-PROCESSAMENTOS: =========================
df$id = as.factor(df$id)
df <- read.csv("C:/Users/ADM/Dropbox/RESIDÊNCIA/Projetos científicos/CEP artroplastia/Projeto Artroplastia/df.csv", stringsAsFactors=TRUE)
View(df)
#PRÃ-PROCESSAMENTOS: =========================
df$id = as.factor(df$id)
df$ano = as.factor(df$ano)
df$tempo = as.factor(df$tempo)
df$asa = as.factor(df$asa)
df$eletiva_urgencia = as.factor(df$eletiva_urgencia)
df$priorday = as.factor(df$priorday)
df$obeso = as.factor(df$obeso)
df$tim = as.factor(df$tim)
df$fii = as.factor(df$fii)
df$sexo = relevel(df$sexo, ref="M")
df$geral = relevel(df$geral, ref="venosa") #trocando a categoria de referencia de level
df$geral[df$geral == ""] = NA
df$geral[df$geral == "nao"] = NA
df$tipo[df$tipo == ""] = NA
df$protocolo_de_hipotermia[df$protocolo_de_hipotermia == ""] = NA
df$pcr[df$pcr == ""] = NA
chisq.test(df$id, df$fii, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr)
mod = glm(fii~id, family=binomial(link='logit'), data=df) #modelo
View(df)
#pacotes: =========================
#install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, psych, car, MASS, DescTools, QuantPsyc, ggplot2)
library(forestmodel)
library(rms)
library(MASS) #para regressao stepwise
library(modEvA) #pseudo R2
library(DescTools) #pseudo R2
library(caret) # matrix confusao
#Densidade:
#idade(hipotensão)
ggplot(df, aes(x=idade, fill=hipo))+
geom_density(position='identity', alpha =0.6)+
scale_x_continuous(name="idade", breaks=seq(0,120,5),limits=c(0,120))+
scale_fill_brewer(palette="Accent")+
labs(title="Frequencia: Idade vs Hipotensão")+
theme_light()+scale_fill_brewer()
#1 PERIODO====================
mod = glm(hipo~tecnica+sexo+id+asa+dm+has+sangramento+
doenca_cardiaca+hipotermia+tempo, family=binomial(link='logit'), data=df)
summary(mod)
exp(cbind(OR = coef(mod), confint(mod)))
forest_model(mod)
vif(mod) #Fator de inflação
mod1 = step(mod, direction = "backward", test = "F") #regressão stepwise
summary(mod1)
forest_model(mod1)
#1 PERIODO====================
mod = glm(hipo~tecnica+sexo+id+asa+dm+has+sangramento+
doenca_cardiaca+hipotermia+tempo, family=binomial(link='logit'), data=df)
summary(mod)
exp(cbind(OR = coef(mod), confint(mod)))
mod1 = step(mod, direction = "backward", test = "F") #regressão stepwise
summary(mod1)
exp(cbind(OR = coef(mod), confint(mod1)))
df <- read.csv("C:/Users/ADM/Dropbox/RESIDÊNCIA/Projetos científicos/CEP artroplastia/Projeto Artroplastia/df.csv", stringsAsFactors=TRUE)
View(df)
#pacotes: =========================
#install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, psych, car, MASS, DescTools, QuantPsyc, ggplot2)
library(forestmodel)
library(rms)
library(MASS) #para regressao stepwise
library(modEvA) #pseudo R2
library(DescTools) #pseudo R2
library(caret) # matrix confusao
#PRÃ-PROCESSAMENTOS: =========================
df$id = as.factor(df$id)
df$ano = as.factor(df$ano)
df$tempo = as.factor(df$tempo)
df$asa = as.factor(df$asa)
df$eletiva_urgencia = as.factor(df$eletiva_urgencia)
df$priorday = as.factor(df$priorday)
df$obeso = as.factor(df$obeso)
df$tim = as.factor(df$tim)
df$fii = as.factor(df$fii)
df$sexo = relevel(df$sexo, ref="M")
df$geral = relevel(df$geral, ref="venosa") #trocando a categoria de referencia de level
df$geral[df$geral == ""] = NA
df$geral[df$geral == "nao"] = NA
df$tipo[df$tipo == ""] = NA
df$protocolo_de_hipotermia[df$protocolo_de_hipotermia == ""] = NA
df$pcr[df$pcr == ""] = NA
#1 PERIODO====================
mod = glm(hipo~tecnica+sexo+id+asa+dm+has+sangramento+
doenca_cardiaca+hipotermia+tempo, family=binomial(link='logit'), data=df)
summary(mod)
#pacotes: =========================
#install.packages("pacman")
library(pacman)
pacman::p_load(dplyr, psych, car, MASS, DescTools, QuantPsyc, ggplot2)
library(forestmodel)
library(rms)
library(MASS) #para regressao stepwise
library(modEvA) #pseudo R2
library(DescTools) #pseudo R2
library(caret) # matrix confusao
mod = glm(fii~id+asa+avc_previo+doenca_cardiaca+drc+tecnica+dva+transamin+transfusao+tempo, family=binomial(link='logit'), data=df)
summary(mod)
exp(cbind(OR = coef(mod), confint(mod)))
forest_model(mod)
library(readxl)
BASE_TRATADA_SEPSE <- read_excel("C:/Users/ADM/Dropbox/TEMPOR�\201RIOS/BASE TRATADA SEPSE.xlsx",
col_types = c("numeric", "numeric", "text",
"text", "numeric", "text", "numeric",
"text", "text", "numeric", "text",
"text", "text", "text", "text", "text",
"numeric", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "numeric", "text",
"numeric", "numeric", "text", "text",
"numeric", "text"))
View(BASE_TRATADA_SEPSE)
BASE.TRATADA.SEPSE <- read.csv("~/projetos/Trabalho - Sepse/BASE TRATADA SEPSE.csv", sep=";", stringsAsFactors=TRUE)
View(BASE.TRATADA.SEPSE)
df <- read.csv("~/projetos/Trabalho - Sepse/BASE TRATADA SEPSE.csv", sep=";", stringsAsFactors=TRUE)
View(df)
df$Q.SOFA
df$Q.SOFA = as.factor(df$Q.SOFA)
df$SOFA = as.factor(df$SOFA)
library(readxl)
df <- read_excel("C:/Users/ADM/Dropbox/TEMPOR�\201RIOS/BASE TRATADA SEPSE.xlsx")
View(df)
library(readxl)
df <- read_excel("C:/Users/ADM/Dropbox/TEMPOR�\201RIOS/BASE TRATADA SEPSE.xlsx")
View(df)
library(readxl)
df <- read_excel("projetos/Trabalho - Sepse/BASE TRATADA SEPSE.xlsx",
sheet = "BASE")
View(df)
library(caret)
table(df$SOFA, df$`G-SOFA`)
table(df$`Q-SOFA`, df$`G-SOFA`)
confusionMatrix(table(df$`Q-SOFA`, df$`G-SOFA`))
table(df$`Q-SOFA`, df$`Coluna1`)
confusionMatrix(table(df$`Q-SOFA`, df$`G-SOFA`))
table(df$`Q-SOFA`, df$`G-SOFA`)
confusionMatrix(table(df$`Q-SOFA`, df$`G-SOFA`))
table(df$`Q-SOFA`, df$`Coluna1`)
confusionMatrix(table(df$`Q-SOFA`, df$`G-SOFA`))
table(df$`Q-SOFA`, df$`G-SOFA`)
confusionMatrix(table(df$`Q-SOFA`, df$`G-SOFA`))
table(df$`Q-SOFA`, df$`Coluna1`)
confusionMatrix(table(df$`Q-SOFA`, df$`Coluna1`))
#CURVA ROC
library(pROC)
par(pty="s")
lrROC <- roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")+lrROC <- roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") + roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE,main="ROC Curves")
roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE)
library(readxl)
BASE_TRATADA_SEPSE <- read_excel("projetos/Trabalho - Sepse/BASE TRATADA SEPSE.xlsx",
sheet = "BASE")
View(BASE_TRATADA_SEPSE)
table(df$`REALREAL`, df$`CORTE2`)
table(df$`REALREAL`, df$CORTE2)
df = BASE_TRATADA_SEPSE
table(df$`REALREAL`, df$`CORTE2`)
table(df$`REALREAL`, df$`CORTE3`)
table(df$`REALREAL`, df$`CORTE4`)
roc(df$`Q-SOFA` ~ df$`G-SOFA` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`Q-SOFA` ~ df$`Coluna1` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE)+
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`REALREAL` ~ df$`CORTE3` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`REALREAL` ~ df$`CORTE4` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE)
confusionMatrix(table(df$`REALREAL`, df$`CORTE2`))
confusionMatrix(table(df$`REALREAL`, df$`CORTE3`))
confusionMatrix(table(df$`REALREAL`, df$`CORTE4`))
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`REALREAL` ~ df$`CORTE3` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`REALREAL` ~ df$`CORTE4` ,plot=TRUE,print.auc=TRUE,col="red",lwd =4,legacy.axes=TRUE, add=TRUE)
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`REALREAL` ~ df$`CORTE3` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`REALREAL` ~ df$`CORTE4` ,plot=TRUE,print.auc=TRUE,col="red",lwd =4,legacy.axes=TRUE, add=TRUE)
legend("bottomright",legend=c("Corte: 2","Corte 3"),col=c("green","blue"),lwd=4)
legend("bottomright",legend=c("Corte: 2","Corte: 3"),col=c("green","blue"),lwd=4)
fourfoldplot(table(df$`REALREAL`, df$`CORTE2`), color = c("cyan", "pink"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
table(df$`REALREAL`, df$`CORTE2`)
confusionMatrix(table(df$`REALREAL`, df$`CORTE2`))
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`REALREAL` ~ df$`CORTE3` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`REALREAL` ~ df$`CORTE4` ,plot=TRUE,print.auc=TRUE,col="red",lwd =4,legacy.axes=TRUE, add=TRUE)
library(precrec)
install.packages("precrec")
library(precrec)
obj = evalmod(scores = df$CORTE2, labels=df$REALREAL)
autoplot(obj)
confusionMatrix(table(df$`REALREAL`, df$`CORTE2`))
table(df$`REALREAL`, df$`CORTE2`)
confusionMatrix(table(df$`REALREAL`, df$`CORTE2`))
confusionMatrix(table(df$`REALREAL`, df$`CORTE3`))
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
roc(df$`REALREAL` ~ df$`CORTE2` ,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves") +
roc(df$`REALREAL` ~ df$`CORTE3` ,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE, add=TRUE) +
roc(df$`REALREAL` ~ df$`CORTE4` ,plot=TRUE,print.auc=TRUE,col="red",lwd =4,legacy.axes=TRUE, add=TRUE)
legend("bottomright",legend=c("Corte: 2","Corte: 3"),col=c("green","blue"),lwd=4)
library(readxl)
df <- read_excel("projetos/Trabalho - Terra Torax/base.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "text", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"text", "text", "numeric", "text",
"text", "numeric", "numeric", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "date", "date", "date",
"numeric", "numeric", "date", "numeric",
"numeric", "date", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text", "text", "date", "numeric",
"text", "text", "text", "text", "text"))
View(df)
chisq.test(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
chisq.test(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
chisq.test(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
tab = table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
chisq.test(tab, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
tab = table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
chisq.test(tab, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
tab
tab = table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
tab = table(df$`Uso de opióide de resgate nas primeiras 24 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab = table(df$`Uso de opióide de resgate nas primeiras 24 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Uso de opióide de resgate nas primeiras 24 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
chisq.test(tab, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
```{r}
```{r}
tab = table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
tab = table(df$`Uso de opióide prescrito de horário nas primeiras 24 horas`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab = table(df$`Uso de opióide prescrito de horário nas primeiras 24 horas`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`uso de opióide nas primeiras 36 horas`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Dor com escala verbal numérica maior que maior que 3 na internação (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Uso de opióide de resgate nas primeiras 24 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Uso de opióide de resgate nas primeiras 24 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Uso de opioide de resgate na primeiras 36 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
describe(df)
summary(df)
summary(df)
summary(df$)
summary(df)
summary(df$IMC)
summary(df$Idade)
summary(df$`Peso (kg)`)
summary(df$`Altura (m)`)
summary(df$IMC)
summary(df$`Fentanil (dose ou na)`)
summary(df$`Sufentanil (dose ou na)`)
summary(df$`Dose de metadona (dose ou na)`)
summary(df$`Dose de sulfato de magnésio (dose ou na)`)
summary(df$Idade)
summary(df$Idade)
summary(df$`Peso (kg)`)
summary(df$`Altura (m)`)
summary(df$IMC)
summary(df$`Fentanil (dose ou na)`)
summary(df$`Sufentanil (dose ou na)`)
summary(df$`Dose de metadona (dose ou na)`)
summary(df$`Dose de sulfato de magnésio (dose ou na)`)
tab
tab = table(df$`Opióide de resgate na RPA (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE) #Qui quadrado(Pearson chi2(2)) e P-value(Pr):
tab = table(df$`Uso de opióide prescrito de horário nas primeiras 24 horas`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`uso de opióide nas primeiras 36 horas`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Dor com escala verbal numérica maior que maior que 3 na internação (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
tab = table(df$`Uso de opióide de resgate nas primeiras 24 horas (sim ou não)`, df$`Realização de bloqueio do plano eretor da espinha (sim ou não)`)
tab
chisq.test(tab, correct=FALSE)
summary(df$Idade)
summary(df$`Peso (kg)`)
summary(df$`Altura (m)`)
summary(df$IMC)
summary(df$`Fentanil (dose ou na)`)
summary(df$`Sufentanil (dose ou na)`)
summary(df$`Dose de metadona (dose ou na)`)
summary(df$`Dose de sulfato de magnésio (dose ou na)`)
summary(df)
setwd("~/projetos/Trabalho - Terra Torax")
summary(df$Idade)
library(ggplot2)
ggplot(data=df) + geom_histogram(aes(x=idade))
ggplot(data=df) + geom_histogram(aes(x=Idade))
ggplot(data=df, aes(x=Idade)) + geom_histogram() + geom_desity()
ggplot(data=df) + geom_histogram(aes(x=Idade)) + geom_desity(aes(x=Idade))
ggplot(data=df) + geom_histogram(aes(x=Idade))
ggplot(data=df, aes(Idade)) + geom_histogram()
ggplot(data=df, aes(Idade)) + geom_histogram() + geom_density()
ggplot(data=df, aes(Idade)) + geom_density() + geom_histogram()
ggplot(data=df, aes(Idade)) + geom_density()
ggplot(data=df, aes(Idade)) + geom_density(color="red")
ggplot(data=df, aes(Idade)) + geom_density(color="red")  + geom_histogram()
ggplot(data=df, aes(Idade)) + geom_histogram(binwidth = 2.5)
ggplot(data=df, aes(Idade)) + geom_histogram()
ggplot(data=df, aes(Idade)) + geom_histogram(binwidth = 1)
ggplot(data=df, aes(Idade)) + geom_histogram(binwidth = 2)
ggplot(data=df, aes(Idade)) + geom_histogram(binwidth = 2.5)
ggplot(data=df, aes(Idade)) + geom_histogram(binwidth = 5)
ggplot(data=df, aes(Idade)) + geom_histogram(binwidth = 10)
ggplot(data=df, aes(Idade)) + geom_histogram()
geom_density(aes(y=2.5 *...count...)
ggplot(data=df, aes(Idade)) + geom_histogram() +
ggplot(data=df, aes(Idade)) + geom_histogram() +
geom_density(aes(y=2.5 * ..count...))
ggplot(data=df, aes(Idade)) + geom_histogram() +
geom_density()
ggplot(data=df, aes(Idade)) +
geom_histogram() +
geom_density()
ggplot(data=df, aes(Idade)) +
geom_histogram() +
geom_density(lwd = 1.2,
linetype = 2,
colour = 2)
ggplot(data=df, aes(Idade)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1.2,
linetype = 2,
colour = 2)
ggplot(data=df, aes(Idade)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "blue") +
geom_density(lwd = 1.2,
linetype = 2,
colour = 2)
white
ggplot(data=df, aes(Idade)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1.2,
linetype = 2,
colour = 2)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2)
```{r}
summary(df$Idade)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2)
summary(df$Idade)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2)
ggplot(df, aes(y=idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6)
ggplot(df, aes(y=idade, fill=Gênero))+
geom_density(aplha=0.6)
ggplot(df, aes(y=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6)
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6)
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6) + geom_point()
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6) + geom_point(*..count...)
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6)
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6) +
scale_fill_brewer(palette="Accent")+
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6) +
scale_fill_brewer(palette="Accent")
ggplot(df, aes(x=Idade, fill=Gênero))+
geom_density(position="identity", aplha=0.6)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2, fill=Gênero)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2, colors=Gênero)
summary(df$Idade)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2, colors=Gênero)
ggplot(data=df, aes(x=Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2)
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2, aes(fill=Gênero))
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2, aes(color=Gênero))
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2, aes(colors=Gênero))
ggplot(data=df, aes(Idade)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +
geom_density(lwd = 1.2, linetype = 2, colour = 2)
library(funModeling)
library(skmir)
library(naniar)
library(janitor)
library(tidyverse)
library(modeldata)
install.packages("funModeling")
install.packages(skmir)
install.packages(naniar)
install.packages(janitor)
install.packages(tidyverse)
install.packages(modeldata)
install.packages("skmr")
install.packages("naniar")
install.packages("janitor")
install.packages("tidyverse")
install.packages("modeldata")
library(funModeling)
library(skmr)
library(naniar)
library(janitor)
library(tidyverse)
library(modeldata)
df %>% tabyl(Gênero) %>% adorn_pct_formatting() %>% arrange(desc(n))
function (coluna) {df %>% tabyl(coluna) %>% adorn_pct_formatting() %>% arrange(desc(n))}
cont = function (coluna) {df %>% tabyl(coluna) %>% adorn_pct_formatting() %>% arrange(desc(n))}
cont(Gênero)
cont(df$Gênero)
tabyl(df$Gênero)
cont = function (coluna) {tabyl(df$coluna) %>% adorn_pct_formatting() %>% arrange(desc(n))}
cont(df$Gênero)
tabyl(Gênero)
tabyl("Gênero")
cont(Gênero)
cont("Gênero")
cont = function (coluna) {df %>% tabyl(coluna) %>% adorn_pct_formatting() %>% arrange(desc(n))}
cont(ASA)
{df %>% tabyl(ASA) %>% adorn_pct_formatting() %>% arrange(desc(n))
df %>% tabyl(ASA) %>% adorn_pct_formatting() %>% arrange(desc(n))
df %>% tabyl(ASA) %>% adorn_pct_formatting() %>% arrange(desc(n))
df %>% tabyl(ASA) %>% adorn_pct_formatting() %>% arrange(desc(n))
